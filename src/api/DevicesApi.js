/*
 * Hologram
 * The Hologram HTTP API is a REST-style interface for managing Hologram devices, accounts, and cloud data.  Using the Hologram REST API, you can activate SIMs, get your devices approximate location, send SMS to your devices, update a device's usage limit, and much more.  ## Authentication  Hologram supports **HTTP Basic authentication** using API keys. Simply set the username of the request to `apikey`. The password field is the API key itself.  You can find your API key on the Hologram Dashboard under [Account Settings](https://dashboard.hologram.io/account/api):  ![API key screenshot](https://hologram.io/wp-content/uploads/2016/12/apikey.png)  Your API key gives you access to your personal account, as well as any organizations you are a member of. Make sure you don't store your API key in a publicly accessible place like GitHub. If you are a member of multiple organizations, many endpoints accept an `orgid` argument to filter for devices or other objects within a specific organization.  You can find your orgid by following this guide from our Help Center.  ### Header Example  ``` curl --verbose GET \\ 'https://dashboard.hologram.io/api/1/users/me' \\ -u apikey:2rjpYZZNzFAoGxAgEP2SC6moL3emyB ```  You can also base64 encode \"apikey:[YOUR_API_KEY]\" where [YOUR_API_KEY] is your API key and include it directly in the header.  ``` curl --verbose GET \\ 'https://dashboard.hologram.io/api/1/users/me' \\ --header \"Authorization: Basic YXBpa2V5OjJyanBZWlpOekZBb0d4QWdFUDJTQzZtb0wzZW15Qg==\" ```  ## Requests  Request bodies can be provided in either JSON or form-urlencoded formats. Please note that the examples in this documentation will only display JSON bodies.  ### **JSON body**  ``` curl --verbose --request POST \\ --header \"Content-Type: application/json\" \\ --header \"Authorization: Basic YXBpa2V5OjJyanBZWlpOekZBb0d4QWdFUDJTQzZtb0wzZW15Qg==\" --data '{\"deviceid\": 56668, \"body\": \"Hello device!\"}' \\ 'https://dashboard.hologram.io/api/1/sms/incoming' ```  ### **form-urlencoded body**  ``` curl --verbose --request POST \\ --header \"Content-Type: application/x-form-urlencoded\" \\ --header \"Authorization: Basic YXBpa2V5OjJyanBZWlpOekZBb0d4QWdFUDJTQzZtb0wzZW15Qg==\" --data 'deviceid=56668&body=Hello%20device!' \\ 'https://dashboard.hologram.io/api/1/sms/incoming' ```  ## Responses  All API responses are returned as JSON objects with the following fields:  * `success` (boolean) - Indicates whether the request was successful.  * `data` (object or array) - Contains the requested data or information about the operation that was performed. Only present when `success` is true.  * `error` (string) - Information about why the request failed. Only present when `success` is false.  Most GET responses will also include the following fields if a limit is included as part of the query string:  * `limit` (number) - The query limit, some have this value built in and others often have a maximum value that the limit can be  * `size` (number) - The number of values returned by the query  * `continues` (boolean, optional) - This is only returned if there are more values than were returned  * `links` (array) - Contains information related to the query performed     * `path` (string) - The API endpoint path     * `base` (string) - API base URL     * `next` (string) - URL with query string to get the next results  ## Rate Limiting  In order to provide a good quality of service to all of our customers, we enforce a rate limit on all API requests.  If you exceed the rate limit you will receive a HTTP 429 response with a JSON response body like this:  ``` {   \"success\":false,   \"error\":\"API rate limit exceeded\" } ```  If you receive this response, you should refrain from making requests for 5-10 seconds and then retry the request.  Hologram's REST API provides methods to perform many requests in bulk. For example, you can change the plans of multiple SIMs at once using https://dashboard.hologram.io/api/1/links/cellular/changeplan.  If there is request you would like to make in bulk but cannot, please reach out to [success@hologram.io](mailto:success@hologram.io) for assistance.
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ListAllDevicesresponse', 'model/RetrieveaDeviceresponse', 'model/UpdateaDevicerequest', 'model/UpdateaDeviceresponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ListAllDevicesresponse'), require('../model/RetrieveaDeviceresponse'), require('../model/UpdateaDevicerequest'), require('../model/UpdateaDeviceresponse'));
  } else {
    // Browser globals (root is window)
    if (!root.Hologram) {
      root.Hologram = {};
    }
    root.Hologram.DevicesApi = factory(root.Hologram.ApiClient, root.Hologram.ListAllDevicesresponse, root.Hologram.RetrieveaDeviceresponse, root.Hologram.UpdateaDevicerequest, root.Hologram.UpdateaDeviceresponse);
  }
}(this, function(ApiClient, ListAllDevicesresponse, RetrieveaDeviceresponse, UpdateaDevicerequest, UpdateaDeviceresponse) {
  'use strict';

  /**
   * Devices service.
   * @module api/DevicesApi
   * @version 1.0
   */

  /**
   * Constructs a new DevicesApi. 
   * @alias module:api/DevicesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the listAllDevices operation.
     * @callback module:api/DevicesApi~listAllDevicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAllDevicesresponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List All Devices
     * `GET https://dashboard.hologram.io/api/1/devices`  Returns a list of your devices. The devices are returned sorted by creation date, with the most recent devices appearing first.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.orgid Only return results for the given organization ID
     * @param {Array.<String>} opts.orgids Only return results for the given organization IDs
     * @param {Number} opts.tagid Only return devices with the given tag ID
     * @param {String} opts.tagname Only return devices with the given tag name
     * @param {String} opts.sim Show device with specific SIM number
     * @param {String} opts.limit Return a maximum of this many devices
     * @param {Number} opts.startafter Return the devices whose IDs come after the given device ID
     * @param {Number} opts.id Return the device with the given device ID
     * @param {Array.<String>} opts.ids Return any device ids that match those given in the array
     * @param {Number} opts.linkid Return the device with the given Link ID
     * @param {String} opts.phone Return the device with the given phone number
     * @param {Boolean} opts.tunnelable Return the devices that are/n't tunnelable through Spacebridge
     * @param {String} opts.name Return the device with the given name
     * @param {String} opts.type Return devices with the given type name
     * @param {Boolean} opts.withlocation Include location data on all devices where we have enough information to determine that. Requires professional plan.
     * @param {String} opts.imei Filter for devices that had the given IMEI on their last session. This searches for standard IMEI which should match what is on the label for the device.
     * @param {String} opts.imei2Dsv Filter for devices that had the given IMEI-SV on their last session. This searches for IMEI-SV which is the normal IMEI but instead of a check digit at the end it has a two digit software version. This is what the network usually sees.
     * @param {module:api/DevicesApi~listAllDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAllDevicesresponse}
     */
    this.listAllDevices = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'orgid': opts['orgid'],
        'tagid': opts['tagid'],
        'tagname': opts['tagname'],
        'sim': opts['sim'],
        'limit': opts['limit'],
        'startafter': opts['startafter'],
        'id': opts['id'],
        'linkid': opts['linkid'],
        'phone': opts['phone'],
        'tunnelable': opts['tunnelable'],
        'name': opts['name'],
        'type': opts['type'],
        'withlocation': opts['withlocation'],
        'imei': opts['imei'],
        'imei%2Dsv': opts['imei2Dsv'],
      };
      var collectionQueryParams = {
        'orgids': {
          value: opts['orgids'],
          collectionFormat: 'multi'
        },
        'ids': {
          value: opts['ids'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ListAllDevicesresponse;

      return this.apiClient.callApi(
        '/api/1/devices', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveaDevice operation.
     * @callback module:api/DevicesApi~retrieveaDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveaDeviceresponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Device
     * `GET https://dashboard.hologram.io/api/1/devices/{deviceid}`  Retrieves the details of an existing device. Specify the unique device identifier (device ID) in the request URL, which you can find on the Dashboard.
     * @param {Number} deviceid Return the device with the given device ID
     * @param {module:api/DevicesApi~retrieveaDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveaDeviceresponse}
     */
    this.retrieveaDevice = function(deviceid, callback) {
      var postBody = null;

      // verify the required parameter 'deviceid' is set
      if (deviceid === undefined || deviceid === null) {
        throw new Error("Missing the required parameter 'deviceid' when calling retrieveaDevice");
      }


      var pathParams = {
        'deviceid': deviceid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RetrieveaDeviceresponse;

      return this.apiClient.callApi(
        '/api/1/devices/{deviceid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateaDevice operation.
     * @callback module:api/DevicesApi~updateaDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateaDeviceresponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Device
     * `PUT https://dashboard.hologram.io/api/1/devices/{deviceid}?orgid={{orgid}}`  Updates the specified device by setting the values of the parameters passed. Any parameters not provided will be left unchanged.  You can change the device's name displayed on the Dashboard. You can also transfer ownership of the device to a different organizaton. You must be an Admin of the recipient organization in order to transfer the device.
     * @param {Number} deviceid Update device with the given device ID
     * @param {Number} orgid Current organization device is under
     * @param {String} contentType 
     * @param {module:model/UpdateaDevicerequest} body 
     * @param {module:api/DevicesApi~updateaDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateaDeviceresponse}
     */
    this.updateaDevice = function(deviceid, orgid, contentType, body, callback) {
      var postBody = body;

      // verify the required parameter 'deviceid' is set
      if (deviceid === undefined || deviceid === null) {
        throw new Error("Missing the required parameter 'deviceid' when calling updateaDevice");
      }

      // verify the required parameter 'orgid' is set
      if (orgid === undefined || orgid === null) {
        throw new Error("Missing the required parameter 'orgid' when calling updateaDevice");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling updateaDevice");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateaDevice");
      }


      var pathParams = {
        'deviceid': deviceid,
        'orgid': orgid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UpdateaDeviceresponse;

      return this.apiClient.callApi(
        '/api/1/devices/{deviceid}?orgid={{orgid}}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
